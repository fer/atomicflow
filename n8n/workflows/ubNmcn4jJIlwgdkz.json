{"createdAt":"2025-05-08T18:40:48.930Z","updatedAt":"2025-05-12T20:08:50.043Z","id":"ubNmcn4jJIlwgdkz","name":"⬆️ Backup n8n credentials to Github","active":true,"nodes":[{"parameters":{"content":"## Subworkflow","height":750.8363163824032,"width":2086.845881354743,"color":6},"id":"1a7f2c34-530b-49cf-925e-25288bb98125","name":"Sticky Note","type":"n8n-nodes-base.stickyNote","position":[-760,300],"typeVersion":1},{"parameters":{"assignments":{"assignments":[{"id":"8d513345-6484-431f-afb7-7cf045c90f4f","name":"Done","type":"boolean","value":true}]},"options":{}},"id":"34e4a846-5c87-4228-93de-91113da15ff4","name":"Return","type":"n8n-nodes-base.set","position":[1120,500],"typeVersion":3.3},{"parameters":{"url":"={{ $json.download_url }}","options":{}},"id":"492718a2-1ca4-4365-9299-3ac419c09200","name":"Get File","type":"n8n-nodes-base.httpRequest","position":[220,380],"typeVersion":4.2},{"parameters":{"conditions":{"options":{"version":1,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"45ce825e-9fa6-430c-8931-9aaf22c42585","operator":{"type":"string","operation":"empty","singleValue":true},"leftValue":"={{ $json.content }}","rightValue":""},{"id":"9619a55f-7fb1-4f24-b1a7-7aeb82365806","operator":{"type":"string","operation":"notExists","singleValue":true},"leftValue":"={{ $json.error }}","rightValue":""}]},"options":{}},"id":"e3c5176e-c8dc-4983-ace7-43763dcc5911","name":"If file too large","type":"n8n-nodes-base.if","position":[20,400],"typeVersion":2},{"parameters":{},"id":"cb68a3d7-b525-4aa8-b0f6-f8b8ff0e846b","name":"Merge Items","type":"n8n-nodes-base.merge","position":[20,660],"typeVersion":2},{"parameters":{"jsCode":"const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();"},"id":"b5900f42-9bef-4fb5-91bb-d2cabe6911a7","name":"isDiffOrNew","type":"n8n-nodes-base.code","position":[220,660],"typeVersion":1},{"parameters":{"dataType":"string","value1":"={{$json.github_status}}","rules":{"rules":[{"value2":"same"},{"value2":"different","output":1},{"value2":"new","output":2}]}},"id":"54d57702-79fe-4afc-ad28-6889d7f52ba4","name":"Check Status","type":"n8n-nodes-base.switch","position":[440,660],"typeVersion":1},{"parameters":{},"id":"85186a7f-e3f7-4d65-aac6-7961ff086db1","name":"Same file - Do nothing","type":"n8n-nodes-base.noOp","position":[660,500],"typeVersion":1},{"parameters":{},"id":"43cc16b0-78c4-416e-92f5-52b03697e3ed","name":"File is different","type":"n8n-nodes-base.noOp","position":[660,660],"typeVersion":1},{"parameters":{},"id":"522d20d2-d550-45a0-8ece-c9ccf88cba2f","name":"File is new","type":"n8n-nodes-base.noOp","position":[660,820],"typeVersion":1},{"parameters":{"resource":"file","owner":{"__rl":true,"mode":"name","value":"={{ $('Globals').item.json.repo.owner }}"},"repository":{"__rl":true,"mode":"name","value":"={{ $('Globals').item.json.repo.name }}"},"filePath":"={{ $('Globals').item.json.repo.path }}.json","fileContent":"={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}","commitMessage":"={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"},"id":"7a47483c-e807-45fa-bc3d-434e6d749b01","name":"Create new file","type":"n8n-nodes-base.github","position":[880,820],"typeVersion":1,"webhookId":"5d6b4c12-6d16-4ee7-917a-b3ca0b190cb4","credentials":{"githubApi":{"id":"iGQWomWxVx4FvkiE","name":"GitHub account"}}},{"parameters":{"resource":"file","operation":"edit","owner":{"__rl":true,"mode":"name","value":"={{ $('Globals').item.json.repo.owner }}"},"repository":{"__rl":true,"mode":"name","value":"={{ $('Globals').item.json.repo.name }}"},"filePath":"={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json","fileContent":"={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}","commitMessage":"={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"},"id":"c8c8c45f-b319-4413-8b93-b817eed28869","name":"Edit existing file","type":"n8n-nodes-base.github","position":[880,640],"typeVersion":1,"webhookId":"528cfdb9-3817-42ec-83c5-80971fbd01ab","credentials":{"githubApi":{"id":"iGQWomWxVx4FvkiE","name":"GitHub account"}}},{"parameters":{"options":{}},"id":"f2dd4c7c-f67a-4ca4-88c8-8f720b31d050","name":"Loop Over Items","type":"n8n-nodes-base.splitInBatches","position":[280,20],"typeVersion":3},{"parameters":{"content":"## Backup to GitHub \nThis workflow will backup all instance credentials to GitHub.\n\nThe files are saved `ID.json` for the filename.\n\n### Setup\nOpen `Globals` node and update the values below 👇\n\n- **repo.owner:** your Github username\n- **repo.name:** the name of your repository\n- **repo.path:** the folder to use within the repository. If it doesn't exist it will be created.\n\n\nIf your username was `john-doe` and your repository was called `n8n-backups` and you wanted the credentials to go into a `credentials` folder you would set:\n\n- repo.owner - john-doe\n- repo.name - n8n-backups\n- repo.path - credentials/\n\n\nThe workflow calls itself using a subworkflow, to help reduce memory usage.","height":596.4810912485963,"width":365.19481715599653,"color":4},"id":"7387fbb9-7c85-4127-b92d-d18ddad3de98","name":"Sticky Note1","type":"n8n-nodes-base.stickyNote","position":[-760,-340],"typeVersion":1},{"parameters":{"content":"## Main","height":434.88564057365943,"width":1028.7522287279464,"color":7},"id":"4406eb9f-7212-4a89-975c-84a268c7103b","name":"Sticky Note2","type":"n8n-nodes-base.stickyNote","position":[840,-140],"typeVersion":1},{"parameters":{"resource":"file","operation":"get","owner":{"__rl":true,"mode":"name","value":"={{ $json.repo.owner }}"},"repository":{"__rl":true,"mode":"name","value":"={{ $json.repo.name }}"},"filePath":"={{ $json.repo.path }}{{ $('Execute Workflow Trigger').item.json.id }}.json","asBinaryProperty":false,"additionalParameters":{}},"id":"54315da6-f69c-4bd5-9e13-eaa263e778c4","name":"Get file data","type":"n8n-nodes-base.github","position":[-180,400],"typeVersion":1,"alwaysOutputData":true,"webhookId":"175889d3-b44b-4a97-904e-a4bd46ee9466","credentials":{"githubApi":{"id":"iGQWomWxVx4FvkiE","name":"GitHub account"}},"continueOnFail":true},{"parameters":{"assignments":{"assignments":[{"id":"6cf546c5-5737-4dbd-851b-17d68e0a3780","name":"repo.owner","type":"string","value":"fer"},{"id":"452efa28-2dc6-4ea3-a7a2-c35d100d0382","name":"repo.name","type":"string","value":"atomicflow"},{"id":"81c4dc54-86bf-4432-a23f-22c7ea831e74","name":"repo.path","type":"string","value":"n8n/credentials/"}]},"options":{}},"id":"0c2daa00-20a9-4660-9f87-3ff73a028327","name":"Globals","type":"n8n-nodes-base.set","position":[-380,560],"typeVersion":3.4},{"parameters":{"command":"npx n8n export:credentials --all --decrypted"},"id":"73ce601f-8c0e-41a4-ba4a-e061467a9d9f","name":"Execute Command","type":"n8n-nodes-base.executeCommand","position":[-600,1220],"typeVersion":1},{"parameters":{"jsCode":"// Function to beautify JSON\nfunction beautifyJson(jsonString) {\n  try {\n    // Parse the JSON string\n    const jsonObject = JSON.parse(jsonString);\n\n    // Format the JSON with indentation\n    return jsonObject; // Return the parsed object directly\n  } catch (error) {\n    // Return the error message if JSON is invalid\n    return `Invalid JSON: ${error.message}`;\n  }\n}\n\n// Retrieve the JSON object from the input data\nconst input = $input.all()[0].json;\n\n// Extract the JSON string from the stdout field\nconst jsonString = input.stdout.match(/\\[{.*}\\]/s);\n\n// Check if a valid JSON string is found\nif (!jsonString) {\n  return {\n    json: {\n      error: \"No valid JSON string found in stdout.\"\n    }\n  };\n}\n\n// Beautify the JSON\nconst beautifiedJson = beautifyJson(jsonString[0]);\n\n// Output the beautified JSON, ensuring each entry is in an object with a 'json' key\nconst output = beautifiedJson.map(entry => ({ json: entry }));\n\n// Return the output\nreturn output;\n"},"id":"18e22a50-9850-42a1-86e9-e8e874d3d0e3","name":"JSON formatting","type":"n8n-nodes-base.code","position":[-420,1220],"typeVersion":2},{"parameters":{"content":"## Edit this node 👇","height":80,"width":150,"color":4},"id":"019528fb-a4ad-4207-acd1-7e79a1eea7ac","name":"Sticky Note3","type":"n8n-nodes-base.stickyNote","position":[-420,460],"typeVersion":1},{"parameters":{"workflowId":"={{ $workflow.id }}","mode":"each","options":{}},"id":"8df1fe2d-a248-4df0-aa9f-3605c25624a4","name":"Execute Workflow","type":"n8n-nodes-base.executeWorkflow","position":[500,20],"typeVersion":1},{"parameters":{"inputSource":"passthrough"},"id":"d43e1571-6f1f-449c-bee2-7f10d002a07d","name":"Execute Workflow Trigger","type":"n8n-nodes-base.executeWorkflowTrigger","position":[-660,680],"typeVersion":1.1},{"parameters":{"resource":"file","operation":"get","owner":"={{$node[\"Globals1\"].json[\"repo\"][\"owner\"]}}","repository":"={{$node[\"Globals1\"].json[\"repo\"][\"name\"]}}","filePath":"={{$node[\"Globals1\"].json[\"repo\"][\"path\"]}}{{ $json.id }}.json","asBinaryProperty":false,"additionalParameters":{}},"id":"6fe09b2f-d0aa-4bd0-8fd7-25c3719b6035","name":"GitHub","type":"n8n-nodes-base.github","position":[80,1260],"typeVersion":1,"alwaysOutputData":true,"webhookId":"7e856775-5c8d-45f6-a8ef-15a482b66ccb","retryOnFail":true,"maxTries":5,"credentials":{"githubApi":{"id":"iGQWomWxVx4FvkiE","name":"GitHub account"}},"continueOnFail":true},{"parameters":{"conditions":{"options":{"version":2,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"16a9182d-059d-4774-ba95-654fb4293fdb","operator":{"type":"string","operation":"notExists","singleValue":true},"leftValue":"={{ $json.error }}","rightValue":""}]},"options":{}},"id":"020ed467-090b-44b3-a218-a77f067c1f50","name":"If","type":"n8n-nodes-base.if","position":[280,1280],"typeVersion":2.2},{"parameters":{"conditions":{"options":{"version":2,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"e0c66624-429a-4f1f-bf7b-1cc1b32bad7b","operator":{"type":"string","operation":"notEquals"},"leftValue":"={{ $json.content }}","rightValue":"={{ $('Loop Over Items1').item.json.toJsonString() }}"}]},"options":{}},"id":"8d0ba4a5-a2aa-4cab-ace7-e9910b1813f4","name":"If1","type":"n8n-nodes-base.if","position":[1000,1560],"typeVersion":2.2},{"parameters":{"jsCode":"let items = $input.all()\n\nfor (item of items) {\n    item.json.content = Buffer.from(item.json.content, 'base64').toString('utf8')\n}\n\nreturn items;\n"},"id":"047794f0-9513-4b6c-a422-e81bc82b5c24","name":"Code","type":"n8n-nodes-base.code","position":[680,1260],"typeVersion":2},{"parameters":{"resource":"file","owner":"={{$node[\"Globals1\"].json[\"repo\"][\"owner\"]}}","repository":"={{$node[\"Globals1\"].json[\"repo\"][\"name\"]}}","filePath":"={{$node[\"Globals1\"].json[\"repo\"][\"path\"]}}{{ $('Loop Over Items1').item.json.id }}.json","fileContent":"={{ $('Loop Over Items1').item.json.toJsonString()  }}","commitMessage":"=[N8N Backup] {{ $('Loop Over Items1').item.json.name }}.json"},"id":"3cb4c56e-012d-4a59-9b44-6e8ec12cbe05","name":"Create new file and commit","type":"n8n-nodes-base.github","position":[460,1440],"typeVersion":1,"webhookId":"7ce407e1-69fc-4f04-8f05-056dddd82b2b","credentials":{"githubApi":{"id":"iGQWomWxVx4FvkiE","name":"GitHub account"}}},{"parameters":{"resource":"file","operation":"edit","owner":"={{$node[\"Globals1\"].json[\"repo\"][\"owner\"]}}","repository":"={{$node[\"Globals1\"].json[\"repo\"][\"name\"]}}","filePath":"={{$node[\"Globals1\"].json[\"repo\"][\"path\"]}}{{ $('Loop Over Items1').item.json.id }}.json","fileContent":"={{ $('Loop Over Items1').item.json.toJsonString()  }}","commitMessage":"=[N8N Backup] {{ $('Loop Over Items1').item.json.name }}.json"},"id":"8528835f-f12a-4227-9f85-1d316a1cc0e0","name":"Update file content and commit","type":"n8n-nodes-base.github","position":[1360,1760],"typeVersion":1,"webhookId":"8e8cde61-fee7-4bd5-bce1-657670f483a3","credentials":{"githubApi":{"id":"iGQWomWxVx4FvkiE","name":"GitHub account"}}},{"parameters":{"values":{"string":[{"name":"repo.owner","value":"fer"},{"name":"repo.name","value":"atomicflow"},{"name":"repo.path","value":"n8n/credentials/"}]},"options":{}},"id":"612a8141-eb83-4cf1-bca4-e2818a6010d7","name":"Globals1","type":"n8n-nodes-base.set","position":[-780,1200],"typeVersion":1},{"parameters":{"options":{}},"id":"56585091-0a10-41a0-9b19-8445fffd52d2","name":"Loop Over Items1","type":"n8n-nodes-base.splitInBatches","position":[-140,1220],"executeOnce":false,"typeVersion":3},{"parameters":{"rule":{"interval":[{"field":"hours"}]}},"id":"e27987f0-1dcc-4ee5-9822-e44c8173b864","name":"Schedule Trigger1","type":"n8n-nodes-base.scheduleTrigger","position":[-1000,1200],"typeVersion":1.2},{"parameters":{"content":"Check if there are any changes in the workflow","height":80},"id":"952c0d67-823a-4fd1-9a18-e09e36a5397e","name":"Sticky Note4","type":"n8n-nodes-base.stickyNote","position":[1260,1680],"typeVersion":1},{"parameters":{"content":"Create a new file for the workflow","height":80},"id":"c5f5fbcb-3fb6-4d28-921b-0dee379ca164","name":"Sticky Note5","type":"n8n-nodes-base.stickyNote","position":[220,1540],"typeVersion":1},{"parameters":{"content":"Check if file exists in the repository","height":80},"id":"d9bd8c51-eef0-448d-8d0f-b82bfe3788e1","name":"Sticky Note7","type":"n8n-nodes-base.stickyNote","position":[120,1180],"typeVersion":1}],"connections":{"Globals":{"main":[[{"node":"Get file data","type":"main","index":0}]]},"Get File":{"main":[[{"node":"Merge Items","type":"main","index":0}]]},"File is new":{"main":[[{"node":"Create new file","type":"main","index":0}]]},"Merge Items":{"main":[[{"node":"isDiffOrNew","type":"main","index":0}]]},"isDiffOrNew":{"main":[[{"node":"Check Status","type":"main","index":0}]]},"Check Status":{"main":[[{"node":"Same file - Do nothing","type":"main","index":0}],[{"node":"File is different","type":"main","index":0}],[{"node":"File is new","type":"main","index":0}]]},"Get file data":{"main":[[{"node":"If file too large","type":"main","index":0}]]},"Create new file":{"main":[[{"node":"Return","type":"main","index":0}]]},"Execute Command":{"main":[[{"node":"JSON formatting","type":"main","index":0}]]},"JSON formatting":{"main":[[{"node":"Loop Over Items1","type":"main","index":0}]]},"Loop Over Items":{"main":[[],[{"node":"Execute Workflow","type":"main","index":0}]]},"Execute Workflow":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"File is different":{"main":[[{"node":"Edit existing file","type":"main","index":0}]]},"If file too large":{"main":[[{"node":"Get File","type":"main","index":0}],[{"node":"Merge Items","type":"main","index":0}]]},"Edit existing file":{"main":[[{"node":"Return","type":"main","index":0}]]},"Same file - Do nothing":{"main":[[{"node":"Return","type":"main","index":0}]]},"Execute Workflow Trigger":{"main":[[{"node":"Globals","type":"main","index":0},{"node":"Merge Items","type":"main","index":1}]]},"GitHub":{"main":[[{"node":"If","type":"main","index":0}]]},"If":{"main":[[{"node":"Code","type":"main","index":0}],[{"node":"Create new file and commit","type":"main","index":0}]]},"If1":{"main":[[{"node":"Update file content and commit","type":"main","index":0}],[{"node":"Loop Over Items1","type":"main","index":0}]]},"Code":{"main":[[{"node":"If1","type":"main","index":0}]]},"Create new file and commit":{"main":[[{"node":"Loop Over Items1","type":"main","index":0}]]},"Update file content and commit":{"main":[[{"node":"Loop Over Items1","type":"main","index":0}]]},"Globals1":{"main":[[{"node":"Execute Command","type":"main","index":0}]]},"Loop Over Items1":{"main":[[],[{"node":"GitHub","type":"main","index":0}]]},"Schedule Trigger1":{"main":[[{"node":"Globals1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":{"node:Schedule Trigger":{"recurrenceRules":[20]},"node:Schedule Trigger1":{"recurrenceRules":[]}},"meta":null,"pinData":{},"versionId":"c839e8c7-34fa-4d7f-901b-706b0885e7c6","triggerCount":1,"tags":[]}